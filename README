# crosscram-ws

A web service API for crosscram [https://github.com/baznex/crosscram](https://github.com/baznex/crosscram).

## Usage

To start the web server, run

    lein run <port-num>

### Creating a Game

Send a HTTP POST request to the "/game" URI.  Two pieces of information are necessary for the server to complete this request: the dimensions of the game board and the two bots to play the game.  There are two ways in which each of these values can be set.

* Board dimensions:
    * dims: the dimensions of the board are encoded as a comma-separated list of integers between square brackets. For example, dims=[10,20] encodes a board of ten rows and twenty columns. Only two-dimensional boards are currently supported.
    * rows, cols: each dimension is listed separately. If either dimension is not set when using these parameters, a 400 response is returned.
* Bots:
    * bots: the bots are similarly encoded as a comma-separated list of namespace names between square brackets.  For example, bots=[crosscram.samples.windowshade-rand,crosscram.samples.reserves-move].
    * bot1, bot2: the bots are listed separately. If either bot is not set when using these parameters, a 400 response is returned.

There should be a function called 'make-move' in each of the bot namespaces given.  See  the crosscram URL given above for details on bot programming.

If this request is successful, a redirect response (303) will be sent containing the URI of the created game resource.  If unsuccessful, a 400 response is sent.

For example, curl can be used to create a game resource as follows:

    curl --location --data "dims=[6,6]&bots=[crosscram.samples.windowshade-rand,crosscram.samples.random]" http://localhost:9999/game
    
The same game resource can also ge created with this:

    curl --location --data "rows=6&cols=6&bot1=crosscram.samples.windowshade-rand&bot2=crosscram.samples.random" http://localhost:9999/game
    
Here the server is running locally on port 9999 and the game will be on a 6-by-6 board between the windowshade-rand and random sample bots.

### Viewing a Game

Send a HTTP GET request to a game resource URI.  If the request is successful, a JSON-formatted game map is returned, otherwise, a 404 response is returned.

As an example, a browser or curl can be used to perform a GET on a URI such as:

    http://localhost:9999/game/123456

(assuming 123456 is a valid game resource).

## License

Distributed under the Eclipse Public License, the same as Clojure.
